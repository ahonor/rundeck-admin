#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-admin:apitoken-remove: "remove an api token"
#/ usage: rerun rundeck-admin:apitoken-remove  --user <>  --password <>  --url <> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh apitoken-remove || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-admin:apitoken-remove. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: USER PASSWORD TOKEN URL

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# Authenticate
# ------------
rundeck_login $URL $USER $PASSWORD


# Request token removal
# ----------------------

CURLOUT=$(mktemp -t curl.out.XXXXXXXXXX)

if ! rundeck_curl -d login=${USER} -d token=${TOKEN} -d Yes=yes \
	-X POST $URL/user/clearApiToken |
	# Convert the result into well formed xhtml so we can query it.
	xmlstarlet fo -R -H > $CURLOUT 2>/dev/null
then
    rerun_die 3 "API error: $URL/user/clearApiToken"
fi

# Check the result from the user profile.

if ! xmlstarlet sel -N x="http://www.w3.org/1999/xhtml" \
	-t -m "//x:span[@class='apitoken']" -v . -n $CURLOUT | grep -q -v $TOKEN
then
    rerun_die 3 "failed to remove token."
fi


rm $CURLOUT

# Done. Exit with last command exit status.
exit $?

