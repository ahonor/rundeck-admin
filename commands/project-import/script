#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-admin:project-import: "import a project"
#/ usage: rerun rundeck-admin:project-import  --project <>  --url <>  --user <>  --password <> [ --admin <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh project-import || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck:project-import. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: PROJECT URL USER PASSWORD ARCHIVE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

if [ ! -f "$ARCHIVE" ]
then
    echo >&2 "Archive not found: $ARCHIVE"
    exit 2
fi

if ! file "$ARCHIVE" | grep -q -i zip
then
    echo >&2 "Archive file does not appear to be a zip file."
    exit 2
fi


# Authenticate
# ------------
rundeck_login $URL $USER $PASSWORD


# Import
# ------
importurl="${URL}/project/importArchive"
: ${ARCHIVE:=${PROJECT}.zip}
CURL_OUT=$(mktemp -t curl.out.XXXXXXXXXX)

if ! rundeck_curl -F zipFile=@$ARCHIVE -F name=$PROJECT \
    -X POST ${URL}/project/importArchive > $CURL_OUT
then
    rerun_die 3 "API error: ${URL}/project/importArchive"
fi
xmlstarlet fo -R -H $CURL_OUT > $CURL_OUT.result 2>/dev/null

if xmlstarlet sel  -N x="http://www.w3.org/1999/xhtml" \
    -t -m "//x:div[@id='error']" $CURL_OUT.result
then
    mesg=$(xmlstarlet sel  -N x="http://www.w3.org/1999/xhtml" \
        -t -m "//x:div[@id='error']" -v . -n $CURL_OUT.result)
    echo >&2 "Error importing archive: ${mesg}"
    exit 1
fi

echo >&2 "Project imported from archive: $ARCHIVE"

# Done. Exit with last command exit status.
exit $?

