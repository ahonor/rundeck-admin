#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-admin:ssh-copy-id: "Copy an SSH key to another server."
#/ usage: rerun rundeck-admin:ssh-copy-id  --user <>  --password <> [ --keypath <>]  --hostname <> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh ssh-copy-id || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-admin:ssh-copy-id. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: USER PASSWORD KEYPATH HOSTNAME

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

! which expect >/dev/null && {
   rerun_die "required command not found: expect."
}

SSH_HOST_IP=${URL}
SSH_HOST_USER=${USER:-rundeck}
SSH_HOST_PASSWD=${PASSWORD:-rundeck}

[ -z "${KEYPATH:-}" ] && {
    SSH_KEY_PATH_PUB="$(eval echo ~${SSH_HOST_USER}/.ssh/id_rsa.pub)"
    echo >&2 "Defaulted key path location to: $SSH_KEY_PATH_PUB"
}

if ! test -f ${SSH_KEY_PATH_PUB}
then
    echo >&2 "${SSH_HOST_USER} host key not found: $SSH_KEY_PATH_PUB"
    exit 1
fi

SSH_OPTIONS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

# Copy this hosts ssh key to the primary.
if ! timeout 60s su - ${SSH_HOST_USER} -c "ssh ${SSH_OPTIONS} ${SSH_HOST_IP} /bin/true" 2>&1 >/dev/null
then
    echo "Copying secondary's ssh key to ${SSH_HOST_USER}@${SSH_HOST_IP}"

    expect /vagrant/ssh-copy-id.expect ${SSH_HOST_IP} ${SSH_HOST_USER} ${SSH_HOST_PASSWD} ${SSH_KEY_PATH_PUB}

    # Test the key-based ssh access to the primary.
    echo "Testing ssh access..."
    if ! timeout 60s su - ${SSH_HOST_USER} -c "ssh ${SSH_OPTIONS} ${SSH_HOST_USER}@${SSH_HOST_IP} uptime"
    then echo >&2 "Warning. Could not ssh after key was copied. Continuing anyway."
    fi
fi

# Done. Exit with last command exit status.
exit $?

