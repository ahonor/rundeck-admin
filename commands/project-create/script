#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-archive:project-create: "create a project"
#/ usage: rerun rundeck:project-create  --project <>  --url <>  --user <>  --password <>

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh project-create || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck:project-create. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: PROJECT URL USER PASSWORD 

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -
COOKIES=$(mktemp "/tmp/cookies.XXXXX")
CURLOPTS="-k -f -s -S -L -c $COOKIES -b $COOKIES"
CURL="curl $CURLOPTS"
CURL_OUT=$(mktemp -t curl.out.XXXXXXXXXX)
    
# Authenticate
# ------------
loginurl="${URL}/j_security_check"
$CURL $loginurl > $CURL_OUT
$CURL -X POST -d j_username=${USER} -d j_password=${PASSWORD} $loginurl > /dev/null


# Request the projet. 
# -------------------
createurl="${URL}/resources/createProject"
$CURL -F project=$PROJECT -X POST $createurl > /dev/null

# Check the project was created.
projecturl="${URL}/api/1/project/$PROJECT"
$CURL -X GET $projecturl > $CURL_OUT
xmlstarlet val $CURL_OUT >/dev/null

if ! xmlstarlet sel -t -m "/result[@success='true']"  -v . $CURL_OUT >/dev/null
then
    rerun_die 3 "Failed to create project $PROJECT."
else
    xmlstarlet sel -t -m "/result/projects/project"  -v name $CURL_OUT 
fi



# Done. Exit with last command exit status.
exit $?

