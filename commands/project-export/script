#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-admin:project-export: "export a project"
#/ usage: rerun rundeck-admin:project-export  --project <>  --url <>  --user <>  --password <> [ --admin <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh project-export || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck:project-export. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: PROJECT URL USER PASSWORD ARCHIVE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -
COOKIES=$(mktemp "/tmp/cookies.XXXXX")
CURLOPTS="-k -f -s -S -L -c $COOKIES -b $COOKIES"
CURL="curl $CURLOPTS"
CURL_OUT=$(mktemp -t curl.out.XXXXXXXXXX)
    
# Authenticate
loginurl="${URL}/j_security_check"
$CURL $loginurl > $CURL_OUT
$CURL -X POST -d j_username=${USER} -d j_password=${PASSWORD} $loginurl > $CURL_OUT

# Export
exporturl="${URL}/project/export"
: ${ARCHIVE:=${PROJECT}.zip}
$CURL -X GET $exporturl/export?name=$PROJECT > $ARCHIVE

if [ ! -f $ARCHIVE ]
then
    echo >&2 "Unexpected error. Archive file not found after export request"
    exit 1
fi

echo >&2 "Project exported to archive: $ARCHIVE"

# Done. Exit with last command exit status.
exit $?

