#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: rundeck-admin:apitoken-create: "Create an API token."
#/ usage: rerun rundeck-admin:apitoken-create  --password <>  --url <>  --user <> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh apitoken-create || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: rundeck-admin:apitoken-create. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: PASSWORD URL USER

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# Authenticate.
# --------------
rundeck_login $URL $USER $PASSWORD
 

# Request a new token.
# ---------------------

CURLOUT=$(mktemp -t curl.out.XXXXXXXXXX.xml)

if ! rundeck_curl $URL/user/generateApiToken?login=${USER} |
	# Convert the result into well formed xhtml so we can query it.
	(xmlstarlet fo --recover --html --nsclean 2>/dev/null) |
	# Get rid of this extraneous class and lang attritues in the html element.
	xmlstarlet ed -d "/html[@class]/@class"                |
	xmlstarlet ed -d "/html[@lang]/@lang"                  > $CURLOUT
then
    rerun_die 3 "API error: $URL/user/generateApiToken"
fi




# Check the result from the user profile.
# Tokens are printed in the order they were created.
declare -a tokens
if ! tokens=( $(xmlstarlet sel \
	-t -m "//span[@class='apitoken']" -v . -n $CURLOUT) )
then
	rerun_die "Server response did not contain token. $CURLOUT"
fi

[ -z "${tokens:-}" -a ${#tokens[*]} -lt 1 ] && {
    rerun_die "Failed to generate a token."
}


# Print token. It was the last created token.
echo ${tokens[${#tokens[*]} -1]}

# Clean up.
rm $CURLOUT

# Done. Exit with last command exit status.
exit $?

